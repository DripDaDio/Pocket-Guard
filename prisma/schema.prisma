generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              String       @id @default(cuid())
  email           String       @unique
  passwordHash    String
  name            String?
  isAccountsLinked Boolean     @default(false)
  // Notification preferences
  notifyOverspend  Boolean     @default(true)
  notifyBills      Boolean     @default(true)
  notifyWeekly     Boolean     @default(false)
  notifyGoals      Boolean     @default(true)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  accounts        Account[]
  transactions    Transaction[]
  goals           Goal[]
  budgets         Budget[]
  subscriptions   Subscription[]
  categories      Category[]
}

model Account {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  accountName    String
  bankName       String
  currentBalance Decimal       @default(0)
  // CHECKING | SAVINGS | CREDIT
  type           String
  last4          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  transactions   Transaction[]
}

model Transaction {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  account     Account      @relation(fields: [accountId], references: [id])
  accountId   String
  date        DateTime
  description String
  amount      Decimal
  // INCOME | EXPENSE
  type        String
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  isRecurring Boolean      @default(false)
  createdAt   DateTime     @default(now())
}

model Category {
  id           String        @id @default(cuid())
  name         String
  icon         String?
  color        String?
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime      @default(now())

  transactions Transaction[]
  budgets      Budget[]
}

model Goal {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  name          String
  targetAmount  Decimal
  savedAmount   Decimal    @default(0)
  targetDate    DateTime?
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Subscription {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  name       String
  amount     Decimal
  dueDate    DateTime
  frequency  String
  // ACTIVE | INACTIVE
  status     String    @default("ACTIVE")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Budget {
  id         String    @id @default(cuid())
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String
  amount     Decimal
  period     String    @default("monthly")
}
